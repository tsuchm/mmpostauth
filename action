#!/usr/bin/perl

use CGI qw/ header /;
use CGI::Carp qw/ fatalsToBrowser /;
use CGI::Fast;
use CGI::Session qw/ -ip-match /;
use Config::Simple qw/ -lc /;
use Cwd qw/ abs_path /;
use DateTime;
use DateTime::Format::SQLite;
use DBIx::Class;
use Encode qw/ encode_utf8 decode_utf8 decode /;
use English qw/ $PROGRAM_NAME /;
use File::Find qw/ find /;
use File::Basename qw/ basename dirname /;
use File::Spec::Functions qw/ catfile /;
use File::stat;
use File::Temp qw/ tempfile tempdir /;
use HTML::Template;
use IO::Scalar;
use JSON qw/ decode_json /;
use LWP::UserAgent;
use Mail::DKIM::Verifier;
use MIME::Parser;
use MIME::Entity;
use MIME::Words qw/ decode_mimewords /;
use strict;
use warnings;
use utf8;
use feature qw/ state /;
use open qw/ :utf8 :std /;
use constant CONFIGFILE => 'mmpostauth.ini';
use constant GOOGLEURL => 'https://www.google.com/recaptcha/api/siteverify';
use constant LOOPDETECTFIELD => 'X-Mailman-Postauth-Listname';

our $CONFIG;
our $DB;
&main();

sub main {
    my $mtime = stat($PROGRAM_NAME)->mtime;
    while( my $cgi = CGI::Fast->new ){
	exit if stat($PROGRAM_NAME)->mtime > $mtime;
	&read_config();
	my $session = CGI::Session->new( 'driver:sqlite', $cgi, { Handle => $DB->storage->dbh } );
	$session->expire( sprintf( '+%dm', int( &param_sessionperiod / 60 ) ) );
	&action( $cgi, $session );
    }
}

sub action {
    my( $cgi, $session ) = @_;
    if( $cgi->path_info =~ m!/status\Z! ){
	print &header( -status => 200, -type => 'text/plain' ), "OK";
    } elsif( $cgi->path_info =~ m!/post\Z! ){
	&post( $cgi );
    } elsif( $cgi->path_info =~ m!/deliver\Z! ){
	&deliver( $cgi );
    } elsif( my( $action, $qid ) = ( $cgi->path_info =~ m!/(login|confirm|approve|revoke)/([a-zA-Z0-9_]{12})\Z! ) ){
	no strict 'refs';
	&{$action}( $cgi, $session, $qid );
    } else {
	print &header( -status => 404, -type => 'text/plain' ), "No valid action.";
    }
}

sub post {
    my( $cgi ) = @_;
    my $fh = $cgi->upload('message');
    unless( $fh ){
	print &header( -status => 400, -type => 'text/plain' ), "No message is given.\n";
	return;
    }
    my $parser = MIME::Parser->new();
    $parser->output_under( &tempdir( CLEANUP => 1 ) );
    my $message = $parser->parse( $fh->handle() );
    my( $listname, $target, $confirm ) = &parse_message( $message );
    unless( $listname ){
	print &header( -status => 415, -type => 'text/plain' ), "Invalid mailman moderation message.\n";
	return;
    }
    unless( my $password = &param_password($listname) ){
	print &header( -status => 403, -type => 'text/plain' );
	printf "No password is specified for `%s'.  Edit `%s' at `%s'.\n", $listname, CONFIGFILE, $cgi->url;
	return;
    }

    my $sender = &extract_sender_address( $target );
    my $from = &extract_from_address( $target );
    my $messageid = &extract_messageid( $target );
    unless( $messageid ){
	print &header( -status => 415, -type => 'text/plain' ), "Missing Message-ID.\n";
	return;
    }

    if( $target->head->get(&LOOPDETECTFIELD) ){
	printf( STDERR
		"loop detected: listname=%s, sender=%s, from=%s, message-id=%s\n",
		$listname, $sender, $from, $messageid ) if &param_verbose;
	if( &send_command_mail( $listname, $message, $target, $confirm, 1 ) ){
	    print &header( -status => 205 );
	}
	return;
    }

    if( !&param_login($listname) and
	( &check_sender_cache( $sender, $from ) or
	  &check_messageid_cache( $messageid ) ) ){
	if( &send_command_mail( $listname, $message, $target, $confirm ) ){
	    print &header( -status => 204 );
	}
	return;
    }

    if( my $pat = &param_dkimdomainpat($listname) ){
	if( $from =~ m/$pat/ ){
	    my $result = &dkim_verify( $listname, $target );
	    if( $result eq 'pass' ){
		if( &send_command_mail( $listname, $message, $target, $confirm ) ){
		    print &header( -status => 202, -type => 'text/plain' ), "DKIM signature is verified.\n";
		}
		return;
	    } elsif( $result eq 'temperror' ){
		print &header( -status => 503, -type => 'text/plain' ), "Temporary failed to verify DKIM signature.\n";
		return;
	    }
	}
    }

    if( my $pat = &param_ignorepat($listname) ){
	if( $from =~ m/$pat/ ){
	    printf( STDERR
		    "ignore from: listname=%s, sender=%s, from=%s, message-id=%s\n",
		    $listname, $sender, $from , $messageid ) if &param_verbose;
	    if( &send_command_mail( $listname, $message, $target, $confirm, 1 ) ){
		print &header( -status => 205 );
	    }
	    return;
	}
    }

    my( $qfh, $qfilename ) = eval { &tempfile( 'XXXXXXXXXXXX', DIR => &param_spooldir(), UNLINK => 0 ); };
    unless( $qfh and $qfilename ){
	print &header( -status => 507, -type => 'text/plain' ), "Cannot create a spool file.\n";
	return;
    }
    print $qfh $message->as_string;
    close $qfh;
    my $qid = &basename($qfilename);
    $DB->resultset('Queue')->find_or_create( { id => $qid, messageid => $messageid } );

    if( my $pat = &param_notifypat($listname) ){
	unless( $from =~ m/$pat/ ){
	    print &header( -status => 204, -type => 'text/plain' );
	    return;
	}
    }

    my $template = &open_template( filename => 'notify.tmpl', die_on_bad_params => 0 );
    $template->param( listto => $listname,
		      baseurl => $cgi->url,
		      qid => $qid );

    my $subject = &param_notifysubject($listname);
    unless( $subject ){
	$subject = $target->head->get('Subject');
	$subject =~ s/\A\s*(re:\s+)*/Re: /i;
    }
    my $ref = $target->head->get('References');
    if( $ref ){
	$ref = join( ' ', $ref, $messageid );
    } else {
	$ref = $messageid;
    }
    my $notify = MIME::Entity->build( From => &extract_from_address($message),
				      To => $sender,
				      Subject => $subject,
				      References => $ref,
				      Type => 'text/plain; charset=utf-8',
				      Encoding => 'base64',
				      Data => &encode_utf8($template->output) );
    # ADHOC FIX:
    # Because In-Reply-To header is not registered in MIME::Entity::KnownField,
    # its specification for MIME::Entity::build function is ignored.
    $notify->head->set( 'In-Reply-To' => $messageid );
    $notify->head->set( &LOOPDETECTFIELD, $listname );
    if( my $bcc = &param_notifybcc($listname) ){
	$notify->head->set( Bcc => $bcc );
    }
    if( &param_debug() ){
	$notify->print_header( \*STDERR );
    } else {
	unless( $notify->smtpsend( Host => &param_smtpserver() ) ){
	    print &header( -status => 503, -type => 'text/plain' ), "Failed to send the notify message.\n";
	    return;
	}
    }
    print &header( -status => 200, -type => 'text/plain', -charset => 'UTF-8' );
    $notify->print_header( \*STDOUT );
    print "\n";
    &fcgi_print( $template->output );
    &expire_cache();
}

sub deliver {
    my( $cgi ) = @_;
    my $fh = $cgi->upload('message');
    unless( $fh ){
	print &header( -status => 400, -type => 'text/plain' ), "No message is given.\n";
	return;
    }
    my $parser = MIME::Parser->new();
    $parser->output_under( &tempdir( CLEANUP => 1 ) );
    my $message = $parser->parse( $fh->handle() );
    my $messageid = &extract_messageid( $message );
    &check_messageid_cache( $messageid, 'create' );
    my $samemessages = $DB->resultset('Queue')->search( { messageid => $messageid } );
    for my $x ( $samemessages->all() ){
	my $queued_message = &read_message( $x->qid );
	my( $listname, $target, $confirm ) = &parse_message( $queued_message );
	&send_command_mail( $listname, $queued_message, $target, $confirm, 1, 0, $x->id );
    }
    $samemessages->delete;
    print &header( -status => 200, -type => 'text/plain', -charset => 'UTF-8' );
    print "\n";
    &expire_cache();
}

sub login {
    my( $cgi, $session, $qid ) = @_;
    if( $ENV{REMOTE_USER} ){
	$session->param( uid => $ENV{REMOTE_USER} );
	&redirect_confirm( $cgi, $session, $qid );
    } else {
	$session->param( uid => undef );
	my $template = &open_template( filename => 'forbidden.tmpl', die_on_bad_params => 0 );
	$template->param( qid => $qid );
	print &header( -status => 403, -type => 'text/html' );
	&fcgi_print( $template->output );
    }
}

sub confirm {
    my( $cgi, $session, $qid ) = @_;
    my $message = &read_message( $qid );
    my( $listname, $target, $confirm ) = &parse_message( $message );
    unless( $listname ){
	&expire_page( $qid );
	return;
    }
    if( &param_login($listname) and ! $session->param('uid') ){
	&redirect_login( $cgi, $session, $qid );
	return;
    }
    my $template = &open_template( filename => 'confirm.tmpl', die_on_bad_params => 0 );
    $template->param( listto => $listname,
		      from => &decode_header( $target->head->get('From') ),
		      to => &decode_header( $target->head->get('To') ),
		      subject => &decode_header( $target->head->get('Subject') ),
		      date => $target->head->get('Date'),
		      messageid => &extract_messageid($target),
		      qid => $qid );
    $template->param( sitekey => &param_sitekey($listname) );
    print( &header( -type => 'text/html',
		    -charset => 'UTF-8',
		    -cookie => &cookie_string( $cgi, $session ) ) );
    &fcgi_print( $template->output );
    $session->param( qid => $qid );
}

sub approve {
    my( $cgi, $session, $qid, $revoke ) = @_;
    unless( $session->param('qid') eq $qid ){
	&redirect_confirm( $cgi, $session, $qid );
	$session->param( qid => undef );
	return;
    }
    my $message = &read_message( $qid );
    my( $listname, $target, $confirm ) = &parse_message( $message );
    unless( $listname ){
	&expire_page( $qid );
	return;
    }
    if( &param_login($listname) and ! $session->param('uid') ){
	&redirect_login( $cgi, $session, $qid );
	return;
    }
    unless( $revoke or &check_captcha( $cgi, $listname ) ){
	&redirect_confirm( $cgi, $session, $qid );
	return;
    }
    return unless &send_command_mail( $listname, $message, $target, $confirm, $revoke, 1, $qid );
    my $template = &open_template( filename => ( $revoke ? 'revoke.tmpl' : 'approve.tmpl' ),
				   die_on_bad_params => 0 );
    $template->param( listto => $listname,
		      from => &decode_header( $target->head->get('From') ),
		      to => &decode_header( $target->head->get('To') ),
		      subject => &decode_header( $target->head->get('Subject') ),
		      date => $target->head->get('Date'),
		      messageid => &extract_messageid($target) );
    print( &header( -type => 'text/html',
		    -charset => 'UTF-8',
		    -cookie => &cookie_string( $cgi, $session ) ) );
    &fcgi_print( $template->output );
}

sub send_command_mail {
    my( $listname, $message, $target, $confirm, $revoke, $certified, $qid ) = @_;
    my $command = MIME::Entity->build( From     => &extract_address( ( $message->head->get('delivered-to') )[0] ),
				       To       => &extract_from_address($confirm),
				       Subject  => $confirm->head->get('subject'),
				       Type     => 'text/plain',
				       Encoding => '7bit',
				       Data     => [ '' ] );
    unless( $revoke ){
	# When no 'Approved: <password>' header is set, this command
	# message will be regarded as a revoke command.
	my $password = &param_password($listname) ||
	    die sprintf( "No password is specified for `%s'.  Edit `%s'", $listname, CONFIGFILE );
	$command->head->set( 'approved', $password );
	&check_sender_cache( &extract_sender_address($target),
			     &extract_from_address($target),
			     'create' ) if $certified;
	&check_messageid_cache( &extract_messageid($target), 'create' );
    }
    if( &param_debug() ){
	$command->print( \*STDERR );
    } else {
	unless( $command->smtpsend( Host => &param_smtpserver() ) ){
	    print( &header( -status => 503, -type => 'text/plain' ),
		   'Failed to send the command message to the mailing list server.' );
	    return 0;
	}
    }
    printf( STDERR
	    "send_command_mail: listname=%s, sender=%s, from=%s, message-id=%s, action=%s\n",
	    $listname,
	    &extract_sender_address($target),
	    &extract_from_address($target),
	    &extract_messageid($target),
	    ( $revoke ? 'revoke' : 'approve' ) ) if &param_verbose();
    my $samemessages = $DB->resultset('Queue')->search( $qid ? { id => $qid } : { messageid => &extract_messageid($target) } );
    for my $x ( $samemessages->all() ){
	unlink &catfile( &param_spooldir(), $x->id );
    }
    $samemessages->delete;
    1;
}

sub revoke {
    my( $cgi, $session, $qid ) = @_;
    &approve( $cgi, $session, $qid, 1 );
}

sub redirect_confirm {
    my( $cgi, $session, $qid ) = @_;
    print &header( -status => 302,
		   -location => sprintf( '%s/confirm/%s', $cgi->url, $qid ),
		   -cookie => &cookie_string( $cgi, $session ) );
}

sub redirect_login {
    my( $cgi, $session, $qid ) = @_;
    print &header( -status => 302,
		   -location => sprintf( '%s/login/%s', $cgi->url, $qid ),
		   -cookie => &cookie_string( $cgi, $session ) );
}

sub cookie_string {
    my( $cgi, $session ) = @_;
    $cgi->cookie( -name => $session->name,
		  -value => $session->id,
		  -domain => $cgi->server_name,
		  -path => $cgi->script_name );
}

sub expire_page {
    my( $qid ) = @_;
    my $template = &open_template( filename => 'expire.tmpl', die_on_bad_params => 0 );
    $template->param( qid => $qid );
    print &header( -status => 404, -type => 'text/html', -charset => 'UTF-8' );
    &fcgi_print( $template->output );
}

sub read_message {
    my( $qid ) = @_;
    my $filename = &catfile( &param_spooldir(), $qid );
    if( open( my $fh, '<:bytes', $filename ) ){
	my $parser = MIME::Parser->new();
	$parser->output_under( &tempdir( CLEANUP => 1 ) );
	$parser->parse( $fh );
    } else {
	warn sprintf( 'Cannot read %s: %s', $filename, $! ) if -f $filename;
	undef;
    }
}

sub parse_message {
    my( $message ) = @_;
    return wantarray ? () : 0 unless $message;

    # Try to extract the mailing list name from the mailman moderation
    # message.  If no mailing list name is found, this message is
    # invalid.
    my $listname = $message->head->get('x-beenthere');
    $listname =~ s/\A\s+//;
    $listname =~ s/\s+\Z//;
    return wantarray ? () : 0 unless $listname;

    # Check the number of the MIME parts of this message.  Any mailman
    # moderation message must consist of 3 MIME parts.
    return wantarray ? () : 0 unless $message->parts == 3;

    # Extract the target part.
    my( undef, $target, $confirm ) = $message->parts;
    return wantarray ? () : 0 unless $target->mime_type eq 'message/rfc822';
    $target = $target->parts(0);

    # Extract the confirmation part.
    return wantarray ? () : 0 unless $confirm->mime_type eq 'message/rfc822';
    $confirm = $confirm->parts(0);

    # Check the subject of the confirmation part.  Any mailman
    # moderation message must have has the subject such as "confirm <id>".
    return wantarray ? () : 0 unless $confirm->head->get('subject') =~ m/\Aconfirm [a-zA-Z0-9]+\r?\n?\Z/;
    ( $listname, $target, $confirm );
}

sub open_template {
    my( %option ) = @_;
    push( @_, filter => \&utf8_template_filter ) unless $option{filter};
    push( @_, default_escape => 'HTML' ) unless $option{default_escape};
    unless( $option{path} ){
	my $curdir = &dirname( &abs_path( $ENV{SCRIPT_FILENAME} || $PROGRAM_NAME ) );
	push( @_, path => [$curdir] );
    }
    HTML::Template->new( @_ );
}

sub utf8_template_filter {
    my $ref = shift;
    $$ref = &decode_utf8( $$ref );
}

sub _normal_fcgi_print {
    print @_;
}

sub _fixed_fcgi_print {
    my $buf = join( '', @_ );
    &utf8::decode( $buf );
    {
	use bytes;
	print $buf;
    }
}

INIT {
    no warnings;
    if( eval { $FCGI::VERSION >= 0.69; } ){
	*fcgi_print = \&_fixed_fcgi_print;
    } else {
	*fcgi_print = \&_normal_fcgi_print;
    }
}

sub decode_header {
    my( $raw ) = @_;
    join( '', map( $_->[1] ? &decode( $_->[1], $_->[0] ) : $_->[0], &decode_mimewords( $raw ) ) );
}

sub extract_address {
    my( $head ) = @_;
    for my $x ( Mail::Address->parse( $head ) ){
	return $x->address;
    }
    $head;
}

sub extract_sender_address {
    my( $m ) = @_;
    &extract_address($m->head->get('sender') || $m->head->get('return-path') || $m->head->get('from'));
}

sub extract_from_address {
    my( $m ) = @_;
    &extract_address($m->head->get('from'));
}

sub extract_messageid {
    my( $m ) = @_;
    my $x = $m->head->get('message-id');
    if( $x ){
	$x =~ s/\A\s+//;
	$x =~ s/\s+\Z//;
    }
    $x;
}

sub check_captcha {
    my( $cgi, $listname ) = @_;
    my $secret = &param_secretkey($listname);
    return 1 unless $secret;
    my $ans = $cgi->param('g-recaptcha-response');
    return 0 unless $ans;
    my $ua = LWP::UserAgent->new();
    my $res = $ua->post( GOOGLEURL,
			 { response => $ans,
			   remoteip => $ENV{REMOTE_ADDR},
			   secret => $secret } );
    if( $res->is_success ){
	print STDERR $res->decoded_content() if &param_debug();
	my $x = &decode_json( $res->decoded_content() );
	return 1 if $x->{success};
    }
    0;
}

sub dkim_verify {
    my( $listname, $target, $retry ) = @_;
    my $data = $target->as_string;
    # ADHOC FIX: DKIM verification is always failed, because
    # MIME::Entity::as_string() replaces all newlines from CRLF to LF.
    # The following regular expression is an adhoc fix of this problem.
    $data =~ s/\r?\n/\r\n/sg;
    my $dkim = Mail::DKIM::Verifier->new();
    $dkim->load( IO::Scalar->new( \$data ) );
    my $result = $dkim->result();
    if( !$retry and $result eq 'fail' ){
	my $date = $target->head->get('date');
	# ADHOC FIX:
	# Mailman removes ZERO from the original date header, as follows:
	#	before: Date: Tue, 03 Apr 2018 01:35:01 +0000
	#	after:  Date: Tue, 3 Apr 2018 01:35:01 +0000
	# The following aims to recover this kind of broken date
	# header.
	if( $date =~ s/\A([A-Z][a-z]{2},\s+)(\d)(\s+)/sprintf('%s%02d%s', $1, $2, $3)/e ) {
	    my $dup = $target->dup;
	    $dup->head->replace( 'date', $date );
	    return &dkim_verify( $listname, $dup, 1 );
	}
    }
    if( &param_dkimignorebody($listname) && $dkim->result_detail eq 'fail (body has been altered)' ){
	# Relax the verification logic.  Even if DKIM signature of the
	# body of the target message is broken, but if DKIM signature
	# of its headers is verified, this program accepts it.
	# However, this relaxzation is weak against reply attack.
	'pass';
    } else {
	if( my $gsig = &param_googlesignature($listname) && $result ne 'pass' && $target->head->get('x-google-dkim-signature') ){
	    my $dup = $target->dup;
	    $dup->head->delete( 'x-google-dkim-signature' );
	    $dup->head->replace( 'dkim-signature', $gsig );
	    &dkim_verify( $listname, $dup );
	} else {
	    printf( STDERR
		    "dkim_verify: listname=%s, sender=%s, from=%s, message-id=%s, result=%s\n",
		    $listname,
		    &extract_sender_address($target),
		    &extract_from_address($target),
		    &extract_messageid($target),
		    $dkim->result_detail ) if &param_verbose();
	    $result;
	}
    }
}

sub prepare_database {
    package My::Schema::Sender {
	use base qw/ DBIx::Class::Core /;
	__PACKAGE__->load_components( qw/ TimeStamp InflateColumn::DateTime / );
	__PACKAGE__->table('senders');
	__PACKAGE__->add_columns( sender => { data_type => 'text', is_nullable => 0 },
				  address => { data_type => 'text', is_nullable => 0 },
				  ctime => { data_type => 'timestamp', set_on_create => 1 } );
	__PACKAGE__->set_primary_key( qw( sender address ) );
	1;
    };
    package My::Schema::MessageID {
	use base qw/ DBIx::Class::Core /;
	__PACKAGE__->load_components( qw/ TimeStamp InflateColumn::DateTime / );
	__PACKAGE__->table('messageids');
	__PACKAGE__->add_columns( id => { data_type => 'text', is_nullable => 0 },
				  ctime => { data_type => 'timestamp', set_on_create => 1 } );
	__PACKAGE__->set_primary_key('id');
	1;
    };
    package My::Schema::Queue {
	use base qw/ DBIx::Class::Core /;
	__PACKAGE__->load_components( qw/ TimeStamp InflateColumn::DateTime / );
	__PACKAGE__->table('queue');
	__PACKAGE__->add_columns( id => { data_type => 'text', is_nullable => 0 },
				  messageid => { data_type => 'text', is_nullable => 0 },
				  ctime => { data_type => 'timestamp', set_on_create => 1 } );
	__PACKAGE__->set_primary_key('id');
	1;
    };
    package My::Schema::Session {
	use base 'DBIx::Class::Core';
	__PACKAGE__->table('sessions');
	__PACKAGE__->add_columns( id => { data_type => 'char(32)', is_nullable => 0 },
				  a_session => { data_type => 'text', is_nullable => 0 } );
	__PACKAGE__->set_primary_key('id');
	1;
    };
    package My::Schema {
	use base 'DBIx::Class::Schema';
	__PACKAGE__->load_classes(qw/Sender MessageID Queue Session/);
	1;
    };

    my $created = 0;
    $created++ unless -f &param_dbfile;
    my $schema = My::Schema->connect( sprintf('dbi:SQLite:dbname=%s', &param_dbfile), undef, undef, { AutoCommit => 1 }  );
    $schema->deploy if $created;
    $schema;
}

sub check_sender_cache {
    my( $sender, $address, $create ) = @_;
    my $spec = { sender => $sender, address => $address };
    my $rs = $DB->resultset('Sender');
    if( $create ){
	$rs->find_or_create( $spec );
    } else {
	my $x = &param_senderperiod && $rs->find( $spec );
	printf( STDERR
		"check_sender_cache: sender=%s, address=%s, result=%s\n",
		$sender, $address, $x ? 'HIT' : 'MISS' ) if &param_verbose;
	$x;
    }
}

sub check_messageid_cache {
    my( $messageid, $create ) = @_;
    my $spec = { id => $messageid };
    my $rs = $DB->resultset('MessageID');
    if( $create ){
	$rs->find_or_create( $spec );
    } else {
	my $x = &param_messageidperiod && $rs->find( $spec );
	printf( STDERR
		"check_messageid_cache: messageid=%s, result=%s\n",
		$messageid, $x ? 'HIT' : 'MISS' ) if &param_verbose;
	$x;
    }
}

sub expire_cache {
    my $now = time;
    my $oldsenders = $DB->resultset('Sender')->search( { ctime => { '<=' => DateTime::Format::SQLite->format_datetime( DateTime->from_epoch( epoch => $now - &param_senderperiod ) ) } } );
    if( &param_verbose ){
	for my $x ( $oldsenders->all ){
	    printf( STDERR "expire_cache: type=sender, sender=%s, address=%s, ctime=%s\n",
		    $x->sender, $x->address, $x->ctime );
	}
    }
    $oldsenders->delete unless &param_debug;
    my $oldids = $DB->resultset('MessageID')->search( { ctime => { '<=' => DateTime::Format::SQLite->format_datetime( DateTime->from_epoch( epoch => $now - &param_messageidperiod ) ) } } );
    if( &param_verbose ){
	for my $x ( $oldids->all ){
	    printf( STDERR "expire_cache: type=messageid, id=%s, ctime=%s, life=%d\n",
		    $x->id, $x->ctime, $now - $x->ctime->epoch );
	}
    }
    $oldids->delete unless &param_debug;
    if( &param_expire() ){
	my $oldqueue = $DB->resultset('Queue')->search( { ctime => { '<=' => DateTime::Format::SQLite->format_datetime( DateTime->from_epoch( epoch => $now - &param_expire ) ) } } );
	if( &param_verbose ){
	    for my $x ( $oldqueue->all ){
		printf( STDERR "expire_cache: type=queue, id=%s, messageid=%s, ctime=%s, life=%d\n",
			$x->id, $x->messageid, $x->ctime, $now - $x->ctime->epoch );
	    }
	}
	unless( &param_debug ){
	    for my $x ( $oldqueue->all ){
		unlink &catfile( &param_spooldir(), $x->id );
	    }
	    $oldqueue->delete;
	}
    }
    CGI::Session->find( 'driver:sqlite', \&expire_session, { Handle => $DB->storage->dbh } );
}

sub expire_session {
    my( $s ) = @_;
    return if $s->is_empty;
    if( ( time - $s->ctime ) > &param_sessionperiod ){
	printf( STDERR "expire_session: sessionid=%s\n", $s->id ) if &param_verbose;
	unless( &param_debug ){
	    $s->delete;
	    $s->flush;
	}
    }
}

sub param_debug {
    &param('debug');
}

sub param_verbose {
    &param('verbose');
}

sub param_smtpserver {
    &param('smtpserver');
}

sub param_spooldir {
    &param('spooldir');
}

sub param_dbfile {
    &param('dbfile');
}

sub param_senderperiod {
    &param('senderperiod');
}

sub param_messageidperiod {
    &param('messageidperiod');
}

sub param_sessionperiod {
    &param('sessionperiod');
}

sub param_expire {
    &param('expire');
}

sub param_password {
    &param('password', $_[0]);
}

sub param_login {
    &param('login', $_[0]);
}

sub param_sitekey {
    &param('sitekey', $_[0]);
}

sub param_secretkey {
    &param('secretkey', $_[0]);
}

sub param_notifysubject {
    &param('notifysubject', $_[0]);
}

sub param_notifypat {
    &param('notifypat', $_[0]);
}

sub param_notifybcc {
    &param('notifybcc', $_[0]);
}

sub param_dkimdomainpat {
    &param('dkimdomainpat', $_[0]);
}

sub param_dkimignorebody {
    &param('dkimignorebody', $_[0]);
}

sub param_ignorepat {
    &param('ignorepat', $_[0]);
}

sub param_googlesignature {
    &param('googlesignature', $_[0]);
}

sub param {
    my $key = shift;
    my $listname = shift;
    if( @_ ){
	$CONFIG->{$listname || 'default'}->{$key} = \@_;
    } else {
	my $v;
	if( defined $listname and exists $CONFIG->{$listname}->{$key} ){
	    $v = $CONFIG->{$listname}->{$key};
	} else {
	    $v = $CONFIG->{'default'}->{$key};
	}
	if( $v ){
	    if ( @{$v} == 1 ) {
		$v->[0];
	    } elsif ( @{$v} ) {
		$v;
	    }
	} else {
	    undef;
	}
    }
}

sub read_config {
    state $mtime = 0;
    if( ( ! $CONFIG ) or ( -f CONFIGFILE and stat(CONFIGFILE)->mtime > $mtime ) ){
	my $parser = Config::Simple->new( syntax => 'ini' );
	$CONFIG = $parser->read( CONFIGFILE );
	unless( &param('smtpserver') ){
	    &param('smtpserver', undef, 'localhost');
	}
	unless( &param('spooldir') ){
	    &param('spooldir', undef, &abs_path( &catfile( &dirname($ENV{'SCRIPT_FILENAME'} || $PROGRAM_NAME), 'spool' ) ) );
	}
	unless( &param('dbfile') ){
	    &param('dbfile', undef, &catfile( &param_spooldir, 'cache.sqlite' ) );
	}
	unless( defined &param('senderperiod') ){
	    &param('senderperiod', undef, 60 * 60 * 24 * 30); # == 30 days
	}
	unless( defined &param('messageidperiod') ){
	    &param('messageidperiod', undef, 60 * 60 * 24); # == 1 day
	}
	unless( defined &param('sessionperiod') ){
	    &param('sessionperiod', undef, 600); # == 10min
	}
	unless( defined &param('expire') ){
	    &param('expire', undef, 60 * 60 * 24 * 30); # == 30 days
	}
	$DB = &prepare_database();
    }
}

=head1 AUTHOR

TSUCHIYA Masatoshi <tsuchm@gmail.com>

=head1 COPYRIGHT

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
